{"version":3,"sources":["components/LengthController/LengthController.js","components/Arc/Arc.js","components/Timer/Timer.js","components/TimerController/TimerController.js","App.js","serviceWorker.js","index.js"],"names":["LengthController","type","length","onUpdateLength","isRunning","className","id","onClick","disabled","Arc","Timer","timerType","timer","minutes","Math","floor","seconds","timeLeft","warnStyle","shadow1","boxShadow","shadow2","color","style","TimerController","onCountDown","onResetTimer","App","state","sessionTime","breakTime","audioRef","React","createRef","handleUpdateLength","action","timeType","setState","prevState","handleUpdateTimer","handleCountDown","clearInterval","countDown","startCountDown","handleReset","current","currentTime","pause","this","play","changeTimer","setInterval","timeCheck","src","preload","ref","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.983ecb33.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './LengthController.css';\n\nconst LengthController = ({ type, length, onUpdateLength, isRunning }) => (\n  <div className=\"length-ctrl\">\n    <div id={`${type}-label`} className=\"length-label\">{`${type} Length`}</div>\n    <div className=\"length-buttons\">\n      <button\n        className=\"length-btn-inc\"\n        id={`${type}-increment`}\n        onClick={() => onUpdateLength(type, 'inc')}\n        disabled={length >= 60 || isRunning ? true : false}\n      >\n        <i className=\"icon ion-md-arrow-dropup\" />\n      </button>\n      <div id={`${type}-length`} className=\"length\">\n        {length}\n      </div>\n      <button\n        className=\"length-btn-dec\"\n        id={`${type}-decrement`}\n        onClick={() => onUpdateLength(type, 'dec')}\n        disabled={length <= 1 || isRunning ? true : false}\n      >\n        <i className=\"icon ion-md-arrow-dropdown\" />\n      </button>\n    </div>\n  </div>\n);\n\nLengthController.propTypes = {\n  type: PropTypes.string.isRequired,\n  length: PropTypes.number.isRequired,\n  onUpdateLength: PropTypes.func.isRequired,\n  isRunning: PropTypes.bool.isRequired\n};\n\nexport default LengthController;\n","import React from 'react';\nimport './Arc.css';\nimport PropTypes from 'prop-types';\n\nconst Arc = ({ isRunning }) => (\n  <div className={`arc arc-1 ${!isRunning && 'pause-anim'}`}>\n    <div className={`arc arc-2 ${!isRunning && 'pause-anim'}`}>\n      <div className={`arc arc-3 ${!isRunning && 'pause-anim'}`}>\n        <div className={`arc arc-4 ${!isRunning && 'pause-anim'}`} />\n      </div>\n    </div>\n  </div>\n);\n\nArc.propTypes = {\n  isRunning: PropTypes.bool.isRequired\n};\n\nexport default Arc;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Timer.css';\nimport Arc from '../Arc/Arc';\n\nconst Timer = ({ timerType, timer, isRunning }) => {\n  const minutes = Math.floor(timer / 60);\n  const seconds = timer % 60;\n  const timeLeft = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n\n  const warnStyle = {\n    shadow1: {\n      boxShadow: '0 0 5rem rgba(255, 0, 0, 0.7)'\n    },\n    shadow2: {\n      boxShadow: '0 0 4rem 2rem rgba(255, 0, 0, 0.7), inset 0 0 3px 8px rgba(255, 0, 0, 0.7)'\n    },\n    color: {\n      color: 'red'\n    }\n  };\n  \n  return (\n    <div className=\"timer-container\">\n      <div id=\"timer-label\" className=\"timer-label\">\n        <i className=\"icon ion-ios-timer\" /> {timerType}\n      </div>\n      <div className=\"timer-box\" style={timer < 60 ? warnStyle.shadow1 : {}}>\n        <Arc isRunning={isRunning}/>\n        <div className=\"timer\" style={timer < 60 ? warnStyle.shadow2 : {}}>\n          <div\n            id=\"time-left\"\n            className=\"time-left-label\"\n            style={timer < 60 ? warnStyle.color : {}}\n          >\n            {timeLeft}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTimer.propTypes = {\n  timerType: PropTypes.string.isRequired,\n  timer: PropTypes.number.isRequired\n};\n\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TimerController.css';\n\nconst TimerController = ({ onCountDown, isRunning, onResetTimer }) => (\n  <div className=\"timer-controller\">\n    <div className=\"btn-box btn-box-playstop\">\n      <span className=\"curve-line\" />\n      <button id=\"start_stop\" onClick={() => onCountDown()}>\n        {isRunning ? (\n          <i className=\"icon ion-md-pause\" />\n        ) : (\n          <i className=\"icon ion-md-play\" />\n        )}\n      </button>\n      <span className=\"short-line\" />\n    </div>\n    <div className=\"btn-box\">\n      <span />\n      <button id=\"reset\" onClick={() => onResetTimer()}>\n        <i className=\"icon ion-md-sync\" />\n      </button>\n      <span className=\"short-line\" />\n    </div>\n  </div>\n);\n\nTimerController.propTypes = {\n  onCountDown: PropTypes.func.isRequired,\n  isRunning: PropTypes.bool.isRequired,\n  onResetTimer: PropTypes.func.isRequired\n};\n\nexport default TimerController;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport LengthController from \"./components/LengthController/LengthController\";\nimport Timer from \"./components/Timer/Timer\";\nimport TimerController from \"./components/TimerController/TimerController\";\n\nclass App extends Component {\n  state = {\n    sessionTime: 25,\n    breakTime: 5,\n    timer: 1500,\n    timerType: \"session\",\n    isRunning: false,\n  };\n\n  audioRef = React.createRef();\n\n  handleUpdateLength = (type, action) => {\n    const timeType = type === \"session\" ? \"sessionTime\" : \"breakTime\";\n    const { isRunning } = this.state;\n\n    if (isRunning) return;\n\n    if (action === \"inc\") {\n      this.setState((prevState) => ({\n        [timeType]: prevState[timeType] + 1,\n      }));\n    } else if (action === \"dec\") {\n      this.setState((prevState) => ({\n        [timeType]: prevState[timeType] - 1,\n      }));\n    }\n\n    if (type === \"session\") {\n      this.handleUpdateTimer();\n    }\n  };\n\n  handleUpdateTimer() {\n    this.setState((prevState) => ({\n      timer: prevState.sessionTime * 60,\n    }));\n  }\n\n  handleCountDown = () => {\n    const { isRunning } = this.state;\n\n    if (!isRunning) {\n      this.setState((prevState) => ({\n        isRunning: !prevState.isRunning,\n      }));\n      this.startCountDown();\n    } else {\n      this.setState((prevState) => ({\n        isRunning: !prevState.isRunning,\n      }));\n      clearInterval(this.countDown);\n    }\n  };\n\n  changeTimer() {\n    this.setState(({ timerType, breakTime, sessionTime }) => {\n      if (timerType === \"session\") {\n        return { timer: breakTime * 60, timerType: \"break\" };\n      } else {\n        return { timer: sessionTime * 60, timerType: \"session\" };\n      }\n    });\n\n    clearInterval(this.countDown);\n    this.startCountDown();\n  }\n\n  timeCheck() {\n    const { timer } = this.state;\n    if (timer < 0) {\n      this.audioRef.current.play();\n      this.changeTimer();\n    }\n  }\n\n  startCountDown() {\n    this.countDown = setInterval(() => {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }));\n      this.timeCheck();\n    }, 1000);\n  }\n\n  handleReset = () => {\n    clearInterval(this.countDown);\n    this.audioRef.current.currentTime = 0;\n    this.audioRef.current.pause();\n    this.setState(() => ({\n      sessionTime: 25,\n      breakTime: 5,\n      timer: 1500,\n      timerType: \"session\",\n      isRunning: false,\n    }));\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.countDown);\n  }\n\n  render() {\n    const { sessionTime, breakTime, timer, timerType, isRunning } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"app-title\">Pomodoro Clock</h1>\n        <div className=\"length-ctrl-box\">\n          <LengthController\n            type=\"session\"\n            length={sessionTime}\n            onUpdateLength={this.handleUpdateLength}\n            isRunning={isRunning}\n          />\n          <LengthController\n            type=\"break\"\n            length={breakTime}\n            onUpdateLength={this.handleUpdateLength}\n            isRunning={isRunning}\n          />\n        </div>\n        <div className=\"time\">\n          <Timer timerType={timerType} timer={timer} isRunning={isRunning} />\n          <TimerController\n            onCountDown={this.handleCountDown}\n            isRunning={isRunning}\n            onResetTimer={this.handleReset}\n          />\n        </div>\n        <audio\n          id=\"beep\"\n          src=\"https://res.cloudinary.com/dpc8imgk1/video/upload/v1547455581/alarm.mp3\"\n          type=\"audio/mpeg\"\n          preload=\"auto\"\n          ref={this.audioRef}\n        />\n        <footer className=\"footer\">\n          <p>\n            Created by:{\" \"}\n            <a\n              className=\"footer-link\"\n              href=\"https://twitter.com/rmasianjr\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              NAM\n            </a>\n            {/*\n            {' '}\n            |{' '}\n            <a\n              className=\"footer-link\"\n              href=\"https://github.com/rmasianjr/pomodoro-clock\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              View source code\n            </a>\n            */}\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}